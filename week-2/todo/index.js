/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const { v4: uuidv4 } = require("uuid");

const app = express();

app.use(express.json());
let data = [];

/*
1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
*/
app.get("/todos", (req, res) => {
    res.json(data);
});

/* 
2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
*/
app.get("/todos/:id", (req, res) => {
    const id = req.params.id;
    const todo = data.find((itm) => itm.id === id);
    if (todo) {
        res.json(todo);
    } else {
        res.status(404).send();
    }
});
/* 
3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
*/
app.post("/todos", (req, res) => {
    const newTodo = {
        id: uuidv4(),
        ...req.body,
    };
    data.push(newTodo);
    res.status(201).json({ id: newTodo.id }); // Returning the ID of the created todo
});

/*
4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
*/
app.put("/todos/:id", (req, res) => {
    const ID = req.params.id;
    const todoIndex = data.findIndex((itm) => itm.id === ID);
    if (todoIndex !== -1) {
        data[todoIndex] = { id: ID, ...req.body }; // Update the todo item
        res.sendStatus(200);
    } else {
        res.status(404).send();
    }
});

/* 
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123
*/

app.delete("/todos/:id", (req, res) => {
    const ID = req.params.id;
    const todoIndex = data.findIndex((itm) => itm.id === ID);
    if (todoIndex !== -1) {
        data.splice(todoIndex, 1); // Remove the todo item from the array
        res.sendStatus(200);
    } else {
        res.status(404).send();
    }
});

/* 
 - For any other route not defined in the server return 404
*/
app.use((req, res) => {
    res.status(404).send(); // Handle undefined routes with a 404 response
});

module.exports = app;
